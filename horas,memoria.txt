18/01
2h

nodejs para backend
recomendable para comunicar con DB
y
reactjs para fronend
recomendable porque usa componentes
lo cual hace el desarrollo escalable
y en cuanto a rendimiento es rapido

instalando nodejs con fast node manager
Para instalar fnm simplemnete use choco install fnm
Para ponerlo en la consola depende de la consola que se use y que se pueda ejecutar fnm env --use-on-cd --shell powershell | Out-String | Invoke-Expression

luego para instalar nodejs en un proyecto (version recomendada)
fnm install --lts

React.js
para instalar:
npm create vite@latest . -- --template react en la carpeta de view,
npm install
npm run dev



y entendiendo la diferencia entre manejo de modulos mediante CommonJS y ES Modules el cual se usa a base de export,import

version de node = 20.16.0
19/01
2 horas //creada DB en mysql workbench

20/01
4 horas 
creando modelo usuario y tareay conexion mysql con npm install
de mysql sacamos promesas que son basicamente una forma de manejar operaciones complejas de forma asincrona con async await (que hace mas legible el codigo)
cambiar controller,cambiar rutas de movie por usuario
implementar el resto de usuario modelo
completar tarea de modelo y hacer lo mismo que el resto,que tenga su controller y demas

21/01
1h y 30min
DB mas completo añadiendo examenes y proyectos,manejado tambien la relacion de proyecto y al menos un usuario,y tambien el trigger para eliminar de la tabla tareas las tareas que habria en un proyecto y que todos los usuarios se eliminasen
pruebas de DB

23/01
1h y 30min
para crear una tarea en un proyecto antes un usuario de los que esta en el debe crear la tarea antes
2h
cambiado examen y tarea la cardinalidad con usuario
controllers casi hechos

26/01
2h y 20min
corrigiendo errores de controllers y modelos ,implantado la encriptacion de contraseñas usnado bcrypt en login y updatepassword de el modelo usuario , corregidas las rutas e implantado el jwt con la ruta de perfil para proteger el inicio de sesiones.

30/01
1h y 30min
corregida la conexion de la base de datos y testeada la creacion de usuarios con ocnraseña encriptada
enrutamiento corregido:
el enrutamiento sirve para aparte de testear,tambien es esencialç
dado que podemos equivocar peticiones GET,POST,PUT/PTACH,DELETE 
de diferentes entidades y da errores de codigo o equivoca a que recursos
se refiere con dicha request

31/01
1h y 45min
creada las validaciones de creacion de cada objeto
y usados en las rutas

01/02
3h
test unitarios de usuario,proyecto,examen,tarea con create con api.http
el flujo se quedaba pillado porque estaba mal organizado entre controlador y modelo y validar

03/02
2h
Corregido el error del segundo insert en create de proyecto y los demas create,mirar createTarea

06/02
3h
resuelto los GETbyId y los GET agrupados por id de usuario
tambien resuelto el tema de iterar con los map por si es mas de una fila
y tambien modificar campos existentes del resultado para que devuelva bien las fechas,uso de left join en proyecto debido a los CONCAT y que significa que la tabla de la izquierda no hace falta que cumpla la condicion con la tabla de la derecha debido a la cardinalidad abierta que hay entre proyecto y tareas y tambien usuarios.

08/02
1h y 30 min
updateById de examen ,todos los delete hechos,mirar el resto de updates ,createTarea y jwt
problemas con update: estaba pasando data en vez de input que es como esta en los parametros del controller

10/02
3h
falta el create tarea y delete tarea en proyecto, tambien el de asociar usuarios al proyecto y update de password en usuario,jwt

11/02
1h y 20min
arreglado update password ,falta  el create tarea y delete tarea en proyecto, tambien el de asociar usuarios al proyecto y update de password en usuario,jwt

13/02
6h
hecho el associateByUsername al proyecto,falta createTP y deleteTP,jwt
tambien se ha cambiado el create de tarea,examen,proyecto para que el id_usuario vaya por req.params

16/02
1h y 35min
arreglado , se estaba pasando mal el input de createTarea porque estaba pasando un objeto con propiedad input :({input}) a proyectomodel,
para acceder a las propiedades de input pues sele estaba llamando asi (input) y despues en tareaModel para create ya se le pasa un objeto con propiedad input ({input})


eliminar tarea de proyecto === eliminar tarea
de ahi el que no haya deleteTarea en proyecto

17/02
2h y 20min
todos los metodos que tienen datos privados o propios del usuario deben llevar la cabecera Authorization: Bearer token
el token se genera a traves del login de usuario a traves de un jwt_secret a traves de la variable de entorno,tras esto si el usuario y la contraseña son las buenas, pues firma con el jwt y saca un token de turno para verificar la informacion de las sesiones y poder hacer sus operaciones con el resto de entidades

23/02
1h y 30min
Empezando con react
main.jsx es el portal de entrada 

componente = funcion que devuelve un elemento html o parecido

todos los componentes deben tener nombre con PascalCase ... ejemplo = SpecialButton
si no no funcionan cuando se introducen en root

creados los botones de operaciones CRUD (css)

25/02
1h y 30min
creando los formularios de login y register
con useState que es un hook para renderizar los cambios hechos en el input label y tambien para manejar el submit

