10/01
10 horas preparatorias de nodejs
10 horas de reactjs
18/01
2h

nodejs para backend
recomendable para comunicar con DB
y
reactjs para fronend
recomendable porque usa componentes
lo cual hace el desarrollo escalable
y en cuanto a rendimiento es rapido

instalando nodejs con fast node manager
Para instalar fnm simplemnete use choco install fnm
Para ponerlo en la consola depende de la consola que se use y que se pueda ejecutar fnm env --use-on-cd --shell powershell | Out-String | Invoke-Expression

luego para instalar nodejs en un proyecto (version recomendada)
fnm install --lts
para arrancar node --watch app.js
React.js
para instalar:
npm create vite@latest . -- --template react en la carpeta de view,
npm install
npm run dev



y entendiendo la diferencia entre manejo de modulos mediante CommonJS y ES Modules el cual se usa a base de export,import

version de node = 20.16.0
19/01
2 horas //creada DB en mysql workbench

20/01
4 horas 
creando modelo usuario y tareay conexion mysql con npm install
de mysql sacamos promesas que son basicamente una forma de manejar operaciones complejas de forma asincrona con async await (que hace mas legible el codigo)
cambiar controller,cambiar rutas de movie por usuario
implementar el resto de usuario modelo
completar tarea de modelo y hacer lo mismo que el resto,que tenga su controller y demas

21/01
1h y 30min
DB mas completo añadiendo examenes y proyectos,manejado tambien la relacion de proyecto y al menos un usuario,y tambien el trigger para eliminar de la tabla tareas las tareas que habria en un proyecto y que todos los usuarios se eliminasen
pruebas de DB

23/01
1h y 30min
para crear una tarea en un proyecto antes un usuario de los que esta en el debe crear la tarea antes
2h
cambiado examen y tarea la cardinalidad con usuario
controllers casi hechos

26/01
2h y 20min
corrigiendo errores de controllers y modelos ,implantado la encriptacion de contraseñas usnado bcrypt en login y updatepassword de el modelo usuario , corregidas las rutas e implantado el jwt con la ruta de perfil para proteger el inicio de sesiones.

30/01
1h y 30min
corregida la conexion de la base de datos y testeada la creacion de usuarios con ocnraseña encriptada
enrutamiento corregido:
el enrutamiento sirve para aparte de testear,tambien es esencialç
dado que podemos equivocar peticiones GET,POST,PUT/PTACH,DELETE 
de diferentes entidades y da errores de codigo o equivoca a que recursos
se refiere con dicha request

31/01
1h y 45min
creada las validaciones de creacion de cada objeto
y usados en las rutas

01/02
3h
test unitarios de usuario,proyecto,examen,tarea con create con api.http
el flujo se quedaba pillado porque estaba mal organizado entre controlador y modelo y validar

03/02
2h
Corregido el error del segundo insert en create de proyecto y los demas create,mirar createTarea

06/02
3h
resuelto los GETbyId y los GET agrupados por id de usuario
tambien resuelto el tema de iterar con los map por si es mas de una fila
y tambien modificar campos existentes del resultado para que devuelva bien las fechas,uso de left join en proyecto debido a los CONCAT y que significa que la tabla de la izquierda no hace falta que cumpla la condicion con la tabla de la derecha debido a la cardinalidad abierta que hay entre proyecto y tareas y tambien usuarios.

08/02
1h y 30 min
updateById de examen ,todos los delete hechos,mirar el resto de updates ,createTarea y jwt
problemas con update: estaba pasando data en vez de input que es como esta en los parametros del controller

10/02
3h
falta el create tarea y delete tarea en proyecto, tambien el de asociar usuarios al proyecto y update de password en usuario,jwt

11/02
1h y 20min
arreglado update password ,falta  el create tarea y delete tarea en proyecto, tambien el de asociar usuarios al proyecto y update de password en usuario,jwt

13/02
6h
hecho el associateByUsername al proyecto,falta createTP y deleteTP,jwt
tambien se ha cambiado el create de tarea,examen,proyecto para que el id_usuario vaya por req.params

16/02
1h y 35min
arreglado , se estaba pasando mal el input de createTarea porque estaba pasando un objeto con propiedad input :({input}) a proyectomodel,
para acceder a las propiedades de input pues sele estaba llamando asi (input) y despues en tareaModel para create ya se le pasa un objeto con propiedad input ({input})


eliminar tarea de proyecto === eliminar tarea
de ahi el que no haya deleteTarea en proyecto

17/02
2h y 20min
todos los metodos que tienen datos privados o propios del usuario deben llevar la cabecera Authorization: Bearer token
el token se genera a traves del login de usuario a traves de un jwt_secret a traves de la variable de entorno,tras esto si el usuario y la contraseña son las buenas, pues firma con el jwt y saca un token de turno para verificar la informacion de las sesiones y poder hacer sus operaciones con el resto de entidades

23/02
1h y 30min
Empezando con react
main.jsx es el portal de entrada 

componente = funcion que devuelve un elemento html o parecido

todos los componentes deben tener nombre con PascalCase ... ejemplo = SpecialButton
si no no funcionan cuando se introducen en root

creados los botones de operaciones CRUD (css)

25/02
3h y 45min
creando los formularios de login y register
con useState que es un hook para renderizar los cambios hechos en el input label y tambien para manejar el submit

01/03
2h
hecho con exito el primer fetch de registro de usuario desde react con react y node levantados,
cada uno con PORT=5000 para node y PORT=5173 para react.
cors manejado

04/03
2h y 30min

fetch login conseguido,pasa los datos relevantes como token,id de usuario para obtener los recursos etc..

intentando implementando react router DOM para redirigir a otro html cuando el login sea exitoso
*posible idea*
otra proposicion es gestionar el token 
tratamiento del token y demas a traves de cookie HTTP-only en lugar de usar session o localstorage para evitar ataques de inyeccion js
(XSS) estableciendo CSP (Content Security Policy) y refresh del token automaticamente sin tener que obligar al usuario a cerrar sesion.

la ruta de logueado esta protegida con un middleware

este middleware se encarga de:
1. que el usuario se ha logueado correctamente
2. outlet carga el componente hijo de la ruta protegida, si no redirige a la pagina de inicio

10/03
1h y 30min

una pequeña vuelta al BACKEND
UN SOLO trigger para eliminar de manera automatica el proyecto cuando no hay usuarios asociados a dicho proyecto y sus tareas, creada la funcion en model y controller , tambien puestos los trigger de update en cada tabla para que contengan el nombre anterior o lo que sea si se deja el campo en blanco.
dissasociateProyecto testeado.

40min FRONTEND

arreglado en router de react dom

11/03
2h

cambiando localstorage por cookies,cambiado el routerUsuario para administrar el logout y la informacion de sesion, el LoginForm para el fetch de informacion

cambiado tambien la PaginaLogueado para que incluya el fetch de informacion de usuario

cambiado el middleware de cors para que acepte credenciales

Uso de cookies:

✅ Mayor seguridad:

    Puedes configurar una cookie como HttpOnly, lo que significa que JavaScript no podrá acceder a ella. Esto la protege de ataques XSS (Cross-Site Scripting).
    Puedes usar Secure, lo que obliga a que la cookie solo se envíe por HTTPS, evitando ataques Man-in-the-Middle (MITM).

✅ Persistencia controlada:

    Las cookies pueden expirar automáticamente cuando tú decidas (maxAge o Expires).
    sessionStorage desaparece cuando cierras la pestaña, y localStorage solo se borra manualmente.

✅ Envío automático al servidor:

    Cada vez que el usuario haga una petición, la cookie se envia.
    Se debera incluir manualmente el token en cada petición.

1. loginUser de controllers hace la firma de JWT y pone la informacion del token en la cookie

2. verifyToken puede acceder al token en req.cookies.token porque el navegador lo envía automáticamente en cada solicitud, siempre y cuando:

    a) Usando cookie-parser en backend

    b) Enviando la cookie al cliente con .cookie(...)

    c) El cliente reenvía cookies (con credentials: 'include')

12/03
30min

colocando logout , me en MVC

15/03
2h
enrutando cada boton del nav a una pagina propia
los css en REACT se aplican a nivel global, por lo tanto hay que poner el nombre del jsx 
ej:
.PaginaInicio .header{}

5h y 45min
CSS time

17/03
2h y 20min
CSS time

18/03
3h
PaginaPerfil
problemas que hubo:
1.
 `` no es igual que "" dado que la primera evalua variables y se necesitan en req.params ,`http://localhost:5000/usuarios/${userId}/password`

2.
coger props para pasarlos a componentes como forms y demas.

3.
el css no estaba funcionando bien porque tenia que ponerse retro-container-P dado que era el div principal de passwordForm, y no se podia con .PaginaPerfil como tal

Hay que hacer navigate a / para cuando se cambia algo de la cuenta.

19/03
3h

para acceder a input en fetch de react hay que acceder a la estructura ,email.email etc...

mañana ver porque cambia los datos en bd bien y no devuelve el ok

22/03
2h

llamar a navigate fera de otros hooks y no estaba accediendo bien a los parametros en handleChange.

Seccion de perfil terminada en FrontEnd.

30/03
1h y 30min

login ahora acepta tanto nombre de usuario como email

31/03
2h

PaginaExamenes con botones por hacer y fetch de crear examen

01/04
5h

Hecha la pagina de examenes

03/04
2h y 30min

corregido el campo de nota de examenes y hecho la pagina de tarea con problemas de que no retornaba el id porque no estaba en el SELECT

06/04
4h

Ajustando la pagina de tareas y css
Tambien hecho un map con los estados de las tareas para que se agrupen por este.

06/04
1h y 20min
retoques e ideas para agrupar examenes

10/04
1h y 45min

hechas las categorias de examen y arreglando mensajes de error 

13/04
3h y 30min

implementando los proyectos en FrontEnd
falta ver como se limpian las categorias o una categoria
.env para que no salga en repositorio

el problema de proyectos era de controller 
se disparaba el error 404 si no tenia proyectos el usuario pero con con la expresion !proyectos no se dispara dado que no devuelve falso

14/04
4h y 40min

arreglando problemas de proyectos ,modificar getall para que devuelva bien los nombres de usuario porque esta devolviendo 1 usuario en vez de 3 y modificar el getall para que agrupe por id_proyecto y tenga en cuenta userId.

hecho, faltan retoques de css y de spans

15/04
2h y 15min

falta que cada tarea de proyecto tenga botones pequeños para eliminarlos o modificarlos o que se eliminen o modifiquen desde tareas 

17/04
4h

Puestas las restricciones necesarias para que no se muestren ciertos campos si no se pone nada ,pues estas no se muestran.

Se puede crear una tarea sin valor o fecha_inicio

Se puede crear un proyecto sin tener descripcion y otra restriccion es que no puede tener tareas con fecha fin > fecha de entrega del proyecto

Intentando tener el eliminar tareas en proyecto

18/04
1h y 30min

Falta inicio y a lo mejor boton de modificar tarea en proyectos

19/04
4h

npm install react-big-calendar date-fns

big-calendar sirve para mostrar un calendario con todos los eventos que hay por dia y date-fns es un localizador de fechas.

hecho el big calendar, faltaria una tarjeta que mostrase otros atributos

21/04
2h

verificando cosas en otros navegadores, corrigiendo errores etc

cambiado el formateo de fecha en el backend debido al desfase de la zona horaria

tambien se debe poner el ajuste de fecha local en todos los contenedores

pensando en ordenar por fecha dentro de cada categoria

26/04
4h
Intentando aplicar SOLID en los objetos
Proyectos,tareas,examenes,usuarios:

SRP
ya tienen tanto controller como models gracias a que la validacion de cada objeto va directamente en middlewares y se ejecuta en cada PATCH y CREATE de cada objeto a traves de routes
falta updatePassword y patch de usuarioque va con funciones aparte

tambien cambiado el metodo me y logout de usuarioModel a controller

27/04
1h

Arreglando validaciones y garantizando el SRP

28/04
2h
Separando operaciones de autenticacion de usuario ,de CRUD de usuario

29/04
3h y 30min

arreglando errores de la petcion /me despues de cambiar usuario authUsuario
muy util hacer control + shift + F para encontrar lineas que no se hayan cambiado en el codigo de todo el proyecto

01/05
2h

Pruebas de integración en FrontEnd con rutas que llaman la logica de negocio de los controladores y la comunicacion con la base de datos:

*Si hay algo que sea null en la base de datos a pesar de que se considere muy importante ,se arregla con los required de los formularios.

Pruebas de integración:

1. PaginaInicio.jsx

1.1 RegisterForm.jsx

Llama a la función register de la clase UsuarioController utilizando el endpoint de rutasUsuario, con el middleware de validación validarCredencialesUsuario. Esta función ejecuta una llamada al modelo correspondiente, que a su vez interactúa con la base de datos para crear un nuevo usuario con los datos del formulario.

Endpoint (URL):
http://localhost:5000/register

Ruta Express:

usuarioRouter.post('/register', validarUsuario, UsuarioController.register);

Body (estructura esperada):

    nombre_usuario:

        Mínimo 5 caracteres

        Máximo 50 caracteres

        No se permite si ya existe otro usuario con el mismo nombre

    email:

        Debe contener @ y tener al menos 15 caracteres

        Mínimo 5 caracteres

        Máximo 100 caracteres

        No se permite si ya existe el email

    contrasena:

        Mínimo 5 caracteres

        Máximo 30 caracteres (por validación)

        Aunque el campo en la base de datos puede ser más largo, el hash generado por bcrypt (alrededor de 60 caracteres) se genera tras pasar la validación.

1.2 LoginForm.jsx

Llama a la función login de la clase AuthController utilizando el endpoint de rutasAuth. Esta función se comunica con el usuarioService (modelo), que consulta la base de datos para autenticar al usuario con los datos del formulario.

Body:

    nombre_usuario o email:

        Se acepta cualquiera de los dos para identificar al usuario.

    contrasena:

        Se valida mediante comparación con el hash almacenado usando bcrypt.

Endpoint (URL):
http://localhost:5000/login

Ruta Express:

usuarioAuthRouter.post('/login', AuthController.login);

2. PaginaLogueado.jsx

Esta vista al igual que el resto es accesible únicamente después del login. Permite al usuario ver todos sus eventos relacionados (tareas, proyectos, exámenes) y también navegar entre diferentes secciones de la aplicación.

2.1 Autenticación del usuario

Endpoint (URL):
http://localhost:5000/me

Método:
GET

Ruta:

usuarioAuthRouter.get("/me", verifyToken, AuthController.me);

Descripción:
Verifica que el usuario tenga una sesión activa y obtiene su información (id, nombre_usuario) a través de una cookie con credentials: "include".

2.2 Obtención de tareas

Endpoint (URL):
http://localhost:5000/usuarios/:id_usuario/tareas

Método:
GET

Ruta:

tareaRouter.get('/usuarios/:id_usuario/tareas',verifyToken , TareaController.getAll);

Descripción:
Devuelve todas las tareas asociadas al userId autenticado.
De cada tarea se saca la descripcion, fecha_fin, fecha_inicio, valor y estado.

2.3 Obtención de proyectos

Endpoint (URL):
http://localhost:5000/usuarios/:id_usuario/proyectos

Método:
GET

Ruta:

proyectoRouter.get('/usuarios/:id_usuario/proyectos',verifyToken , ProyectoController.getAll);

Descripción:
Devuelve todos los proyectos del usuario autenticado, incluyendo titulo, descripcion, fecha_entrega, usuarios y tareas.

2.4 Obtención de exámenes

Endpoint (URL):
http://localhost:5000/usuarios/:id_usuario/examenes

Método:
GET

Ruta:

examenRouter.get('/usuarios/:id_usuario/examenes',verifyToken , ExamenController.getAll);

Descripción:
Retorna todos los exámenes del usuario autenticado, con campos como asignatura, nota y fecha.

2.5 Cierre de sesión

Endpoint (URL):
http://localhost:5000/logout

Método:
POST

Ruta:

usuarioAuthRouter.post('/logout', AuthController.logout);

Descripción:
Cierra la sesión del usuario destruyendo la cookie de sesión.
Resumen funcional

Los datos obtenidos se combinan y se muestran en un calendario visual (react-big-calendar) como eventos de tipo:

    Tarea: [descripcion]

    Proyecto: [titulo]

    Examen: [asignatura]

Cada evento se muestra con su fecha de inicio/entrega correspondiente, tanto en el calendario como en una sección lateral de los eventos futuros.

3. PaginaPerfil.jsx

Esta vista permite al usuario autenticado modificar sus datos personales (nombre de usuario, correo, contraseña) o eliminar su cuenta. También incluye navegación hacia otras secciones y la opción de cerrar sesión.

3.1 Autenticación del usuario

Explicado anteriormente.

3.2 Cierre de sesión

Explicado anteriormente.

3.3 Cambio de contraseña

Componente:
<ProfilePasswordForm/>

Endpoint (URL):
http://localhost:5000/usuarios/:id/password

Método:
PUT

Ruta:

usuarioRouter.patch('/usuarios/:id/password', verifyToken ,validarUsuarioPassword,UsuarioController.updatePassword);

Descripción:
Permite al usuario cambiar su contraseña actual por una nueva.

3.4 Cambio de email y nombre de usuario

Componente:
<ProfileEmailUsernameForm/>

Endpoint (URL):
http://localhost:5000/usuarios/:id

Método:
PUT

Ruta:

usuarioRouter.patch('/usuarios/:id',verifyToken,validarUsuarioUpdateById ,UsuarioController.updateById);

Descripción:
Permite modificar el nombre_usuario o el email del usuario autenticado.

3.5 Eliminación de cuenta

Componente:
<ProfileDeleteForm/>

Endpoint (URL):
http://localhost:5000/usuarios/:id

Método:
DELETE

Ruta:

usuarioRouter.delete('/usuarios/:id',verifyToken , UsuarioController.delete);

Descripción:
Elimina permanentemente la cuenta del usuario actual, incluida toda su información asociada.

02/05
3h

alerta personalizada para success, algo de memoria y Pruebas
Modificando calendario para los eventos con classname

03/05
2h y 15min

Haciendo mas pruebas y editando cosas

04/05
2h

Dando privilegios de admin y eliminar miembros desde un admin

05/05
4h y 30min

Diferenciando entre tareas y metas pero son la misma entidad con un enum llamado tipo, en proyectos solo va a haber metas


